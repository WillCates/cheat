#python sequencing tuple ranges lists

#https://docs.python.org/3.3/library/stdtypes.html#sequence-types-list-tuple-range
x in s	True if an item of s is equal to x, else False	(1)
x not in s	False if an item of s is equal to x, else True	(1)
s + t	the concatenation of s and t	(6)(7)
s * n or n * s	n shallow copies of s concatenated	(2)(7)
s[i]	ith item of s, origin 0	(3)
s[i:j]	slice of s from i to j	(3)(4)
s[i:j:k]	slice of s from i to j with step k	(3)(5)
len(s)	length of s	 
min(s)	smallest item of s	 
max(s)	largest item of s	 
s.index(x[, i[, j]])	index of the first occurrence of x in s (at or after index i and before index j)	(8)
s.count(x)	total number of occurrences of x in s	 

#sorting and object manipulation
where list 'numbers' is a list of numbers
doing 'numbers.sort()' takes action on the list 'numbers' and sorts the contents. 
doing 'sorted(numbers)' does NOT take action on the 'numbers' array, but instead prints the numbers array in a sorted format.

#new list vs operations on same object.
even = [2, 4, 6, 8]
another_even = even # this binds both of those lists together, and any operation on one of them will affect both.
another_even.sort(reverse=True) # this will affect the sorting of both 'another_even' and 'even'
print(another_even = even) #This will return 'True' because they are the same object.
another_even = list(even) #this assigns a new list as a separate object.
print(another_even = even) #this will return 'False' if the list function was used to assign the value of 'even' to 'another_even'
print(another_even == even) #this will return 'True' as it is a comparison operator checking if the values are the same, not if it is the same object in memmory

#append to list
list = []
list.append(["something", "something else"])

#nested loops printing lists:
#'meal' is a set of sets as such:
>>> menu = []
>>> menu.append(["egg", "spam", "bacon"])
>>> menu.append(["egg", "sausage", "bacon"])
>>> menu.append(["egg", "spam"])
>>> menu.append(["egg", "bacon", "spam"])
>>> menu.append(["egg", "bacon", "sausage", "spam"])
>>> menu.append(["spam", "bacon", "sausage", "spam"])
>>> menu.append(["spam", "egg", "spam", "spam", "bacon", "spam"])
>>> menu.append(["spam", "egg", "sausage", "spam"])

#checking for if the set doesn't contain 'spam', print the letters of the ingredients:
>>> for meal in menu:
...     if not "spam" in meal:
...             for ingredient in meal:
...                     for letter in ingredient:
...                             print(letter)
...
e
g
g
...

#iterables: string, list, ranges, tuples
my_iter = iter(string)
count = len(string)
for i in range(0, count):
  print(next(my_iter))
  
#ranges:
print(range(100)) #will default to range(0, 100)
#step range:
range(0, 100, 2) #every two numbers (even)
range(1, 100, 2) #every two numbers (odd)
#ranges don't take much space unless you create a list from the range when you have a long range.
print(some_iterable_item[5]) #will print 6th item in the list

#Tuples are like lists, but cannot be changed - immutable
#lists are enclosed in square brackets, tuples are enclosed in parentheses 
#can have different data types within a tuple







